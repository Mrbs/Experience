#include <unistd.h>   
#include <stdint.h>
#include <stdio.h>   
#include <termios.h>   
#include <fcntl.h>   
#include <sys/select.h>
#include <sys/time.h>
#include <string.h>   
#include <mysql/mysql.h>
#include <time.h>   

//为了保证用户输入的波特率是个正确的值，所以需要这两个数组验证，对于设置波特率时候，前面要加个B   
int speed_arr[] = { B115200, B57600, B38400, B19200, B9600, B4800, B2400, B1200, B300,  
    B115200, B57600, B38400, B19200, B9600, B4800, B2400, B1200, B300, };  
  
int name_arr[] = {115200, 57600, 38400, 19200, 9600, 4800, 2400, 1200, 300,  
    115200, 57600, 38400, 19200, 9600, 4800, 2400, 1200, 300, };  

  
/*----------------------------------------------------------------------------- 
  函数名:      set_speed 
  参数:        int fd ,int speed 
  返回值:      void 
  描述:        设置fd表述符的串口波特率 
 *-----------------------------------------------------------------------------*/  
void set_speed(int fd ,int speed)  
{  
    struct termios opt;  
    int i;  
    int status;  
  
    tcgetattr(fd,&opt);  
    for(i = 0;i < sizeof(speed_arr)/sizeof(int);i++)  
    {  
        if(speed == name_arr[i])                        //找到标准的波特率与用户一致   
        {  
            tcflush(fd,TCIOFLUSH);                      //清除IO输入和输出缓存   
            cfsetispeed(&opt,speed_arr[i]);         //设置串口输入波特率   
            cfsetospeed(&opt,speed_arr[i]);         //设置串口输出波特率   
  
            status = tcsetattr(fd,TCSANOW,&opt);    //将属性设置到opt的数据结构中，并且立即生效   
            if(status != 0)  
                perror("tcsetattr fd:");                //设置失败   
            return ;  
        }  
        tcflush(fd,TCIOFLUSH);                          //每次清除IO缓存   
    }  
}  
/*----------------------------------------------------------------------------- 
  函数名:      set_parity 
  参数:        int fd 
  返回值:      int 
  描述:        设置fd表述符的奇偶校验 
 *-----------------------------------------------------------------------------*/  
int set_parity(int fd)  
{  
    struct termios opt;  
  
    if(tcgetattr(fd,&opt) != 0)                 //或许原先的配置信息   
    {  
        perror("Get opt in parity error:");  
        return -1;  
    }  
  
    /*通过设置opt数据结构，来配置相关功能，以下为八个数据位，不使能奇偶校验*/  
    opt.c_iflag &= ~(IGNBRK | BRKINT | PARMRK | ISTRIP  
                | INLCR | IGNCR | ICRNL | IXON);  
    opt.c_oflag &= ~OPOST;  
    opt.c_lflag &= ~(ECHO | ECHONL | ICANON | ISIG | IEXTEN);  
    opt.c_cflag &= ~(CSIZE | PARENB);  
    opt.c_cflag |= CS8;  
  
    tcflush(fd,TCIFLUSH);                           //清空输入缓存   
  
    if(tcsetattr(fd,TCSANOW,&opt) != 0)  
    {  
        perror("set attr parity error:");  
        return -1;  
    }  
  
    return 0;  
}  
/*----------------------------------------------------------------------------- 
  函数名:      serial_init 
  参数:        char *dev_path,int speed,int is_block 
  返回值:      初始化成功返回打开的文件描述符 
  描述:        串口初始化，根据串口文件路径名，串口的速度，和串口是否阻塞,block为1表示阻塞 
 *-----------------------------------------------------------------------------*/  
int serial_init(char *dev_path,int speed,int is_block)  
{  
    int fd;  
    int flag;  
  
    flag = 0;  
    flag |= O_RDWR;                     //设置为可读写的串口属性文件   
    if(is_block == 0)  
        flag |=O_NONBLOCK;              //若为0则表示以非阻塞方式打开   
  
    fd = open(dev_path,flag);               //打开设备文件   
    if(fd < 0)  
    {  
        perror("Open device file err:");  
        close(fd);  
        return -1;  
    }  
  
    /*打开设备文件后，下面开始设置波特率*/  
    set_speed(fd,speed);                //考虑到波特率可能被单独设置，所以独立成函数   
  
    /*设置奇偶校验*/  
    if(set_parity(fd) != 0)  
    {  
        perror("set parity error:");  
        close(fd);                      //一定要关闭文件，否则文件一直为打开状态   
        return -1;  
    }  
  
    return fd;  
}  
/*----------------------------------------------------------------------------- 
  函数名:      serial_send 
  参数:        int fd,char *str,unsigned int len 
  返回值:      发送成功返回发送长度，否则返回小于0的值 
  描述:        向fd描述符的串口发送数据，长度为len，内容为str 
 *-----------------------------------------------------------------------------*/  
int serial_send(int fd,unsigned char *str,unsigned int len)  
{  
    int ret;  
  
    if(len > strlen(str))                    //判断长度是否超过str的最大长度   
        len = strlen(str);  
  
    ret = write(fd,str,len);  
    if(ret < 0)  
    {  
        perror("serial send err:");  
        return -1;  
    }  
  
    return ret;  
}  
  
/*----------------------------------------------------------------------------- 
  函数名:      serial_read 
  参数:        int fd,char *str,unsigned int len,unsigned int timeout 
  返回值:      在规定的时间内读取数据，超时则退出，超时时间为ms级别 
  描述:        向fd描述符的串口接收数据，长度为len，存入str，timeout 为超时时间 
 *-----------------------------------------------------------------------------*/  
int serial_read(int fd, char *str, unsigned int len, unsigned int timeout)  
{  
    fd_set rfds;  
    struct timeval tv;  
    int ret;                                //每次读的结果   
    int sret;                               //select监控结果   
    int readlen = 0;                        //实际读到的字节数   
    char * ptr;  
  
    ptr = str;                          //读指针，每次移动，因为实际读出的长度和传入参数可能存在差异   
  
    FD_ZERO(&rfds);                     //清除文件描述符集合   
    FD_SET(fd,&rfds);                   //将fd加入fds文件描述符，以待下面用select方法监听   
  
    /*传入的timeout是ms级别的单位，这里需要转换为struct timeval 结构的*/  
    tv.tv_sec  = timeout / 1000;  
    tv.tv_usec = (timeout%1000)*1000;  
  
    /*防止读数据长度超过缓冲区*/  
    //if(sizeof(&str) < len)   
    //  len = sizeof(str);   
  
  
    /*开始读*/  
    while(readlen < len)  
    {  
        sret = select(fd+1,&rfds,NULL,NULL,&tv);        //检测串口是否可读   
  
        if(sret == -1)                              //检测失败   
        {  
            perror("select:");  
            break;  
        }  
        else if(sret > 0)                        //检测成功可读   
        {  
            ret = read(fd,ptr,1);  
            if(ret < 0)  
            {  
                perror("read err:");  
                break;  
            }  
            else if(ret == 0)  
                break;  
  
            readlen += ret;                             //更新读的长度   
            ptr     += ret;                             //更新读的位置   
        }  
        else                                                    //超时   
        {  
            printf("timeout!\n");  
            break;  
        }  
    }  
  
    return readlen;  
} 


int main(int argc,char* argv[])
{


	int		fd_Plc;  
	int		round;  
	int		NumBytes;
	int		id = 5;
	unsigned	char buf[1024]; 
	char		mysqlInsert[100]; 
        memset(mysqlInsert,0,sizeof(mysqlInsert)); 

 	unsigned	char test[8] = {0x05,0x03,0x00,0x00,0x00,0x0a,0xc4,0x49}; 
	/*
		Variable Description:	unsigned	char test[8]
		Item:			Rawdata1
		Function:	read data from plc slave: 
				0x05:		slave address 5;
				0x03:		read Siemens 200 Plc data;
				0x00 0x00:	read register 400001;
				0x00 0x00:	read 6 bytes from register 40001;
				0xc4 0x4c:	CRC check sum;
	*/
 
	float 		ReceivedDataFrmPlc[5];
	/*
		Variable Description:	float 		ReceivedDataFrmPlc[5]
		Item:			OutputData1
		Function:	restore data from Rawdata1	
	*/
	
	//int step;
	fd_Plc =  serial_init("/dev/ttyUSB0",9600,1);  
	 if(fd_Plc < 0)  
		{  
			perror("serial init err:");  
			return -1;  
		} 

	//
 	MYSQL my_connecyion;
  	int res;
	mysql_init(&my_connecyion);
	if(!mysql_real_connect(&my_connecyion,"localhost","root","root","tests",0,NULL,0))
 		{ 
          		printf("Mysql Connection Failed\n"); 
       
 		}

	while(1){
			NumBytes = write(fd_Plc,test,8);
			/*
			for(round = 0;round < 8;round++){
				printf("%02x\n",test[round]);
			} */
			//printf("Send %d bytes to Plc\n",NumBytes);	
    			NumBytes = serial_read(fd_Plc,buf,1024,300);  
			//printf("Read %d bytes from Plc:\n",NumBytes);
			/*
			for(round = 0;round < NumBytes ;round++){
				printf("%02x\n",buf[round]);
			}
			*/
			unsigned short frist  = (unsigned short) buf[3];
 			unsigned short second = (unsigned short) buf[4];
  			unsigned short value1;
 			if(frist > 10000||frist == 0) {
  				value1 = second;
			} else{
  				value1 = (frist * 256) + second;
			}
			float *a;
			unsigned char str[4];
			a = (float *)str;

			str[0] = buf[6];
			str[1] = buf[5];
			str[2] = buf[4];
			str[3] = buf[3];
			printf("Higher Pre Temperature:%06f\n ",(float)*a);

			//printf("%02x\n",buf[3]);
			//printf("%02x\n",buf[4]);
			float flaot1 = (float) value1 / 100;
			//printf("Float1:%02f\n",flaot1);			


			short th = (short) buf[5];
			short fo = (short) buf[6];
			short value2;
			if(th == 0 ||th == 255) {
                                value2 = fo;
                          //      printf("result: %d\n",value2);
                        } else{
                                value2 = (th * 256) + fo;
                            //    printf("result2: %d\n",value2);
                        }
			//printf("result Fo: %d\n", (unsigned short)fo);
			float flaot2 = (float) value2 / 100;
                       // printf("Float2:%02f\n",flaot2);

			float *b;
                        unsigned char str2[4];
                        b = (float *)str2;

                        str2[0] = buf[10];
                        str2[1] = buf[9];
                        str2[2] = buf[8];
                        str2[3] = buf[7];
                        printf("Higher Pre Humidity:%06f\n ",(float)*b);



			unsigned short fi = (unsigned short) buf[7];
                        unsigned short si = (unsigned short) buf[8];
			if(fi > 10000) fi = 0;
			unsigned short value3 =(fi * 256)+si;
                        //printf("result3:%d\n",(unsigned short)value3);
			float flaot3 = (float) value3 / 100;
                        //printf("Float3:%02f\n",flaot3);
			
                     	float *c;
                        unsigned char str3[4];
                        c = (float *)str3;

                        str3[0] = buf[14];
                        str3[1] = buf[13];
                        str3[2] = buf[12];
                        str3[3] = buf[11];
                        printf("Higher Pre Supply Pressure:%06f\n ",(float)*c);

			unsigned short se = (unsigned short) buf[9];
                        unsigned short ei = (unsigned short) buf[10];
 			if(se > 10000) se = 0;
                        unsigned short value4 =(se * 256)+ei;
                        //printf("result4:%d\n",(unsigned short)value4);
			float flaot4 = (float) value4 / 100;
                        //printf("Float4:%02f\n",flaot4);

			float *d;
                        unsigned char str4[4];
                        d = (float *)str4;

                        str4[0] = buf[18];
                        str4[1] = buf[17];
                        str4[2] = buf[16];
                        str4[3] = buf[15];
                        printf("Higher Pre Return Pressure:%06f\n ",(float)*d);

	  	        unsigned short ni = (unsigned short) buf[11];
                        unsigned short te = (unsigned short) buf[12];
 			if(ni > 10000) ni = 0;
                        unsigned short value5 =(ni * 256)+te;
                        //printf("result5: %d\n",(signed short)value5);
			float flaot5 = (float) value5 / 100;
                       // printf("Float5:%02f\n",flaot5);

			float *e;
                        unsigned char str5[4];
                        e = (float *)str5;

                        str5[0] = buf[22];
                        str5[1] = buf[21];
                        str5[2] = buf[20];
                        str5[3] = buf[19];
                        printf("Higher Pre Instant Fluid rate:%06f\n ",(float)*e);

	        	 short el = (short) buf[13];
                        short tw = (short) buf[14];
 			if(el > 10000) el = 0;
                        short value6 =(el * 256)+tw;

                       // printf("result6:%d\n",(unsigned short)value6);
			printf("Temperature                Humidity                 SuppPressure               ReturnPressure              InsFluid\n");
			printf(" %06f                  %06f                  %06f                   %06f                    %06f\n",(float)*a,
				(float)*b,(float)*c,(float)*d,(float)*e);

			ReceivedDataFrmPlc[0] = (float)(value1/10);
			ReceivedDataFrmPlc[1] = (float)(value2/10);
			ReceivedDataFrmPlc[2] = (float)(value3);
			ReceivedDataFrmPlc[3] = (float)(value4);
			ReceivedDataFrmPlc[3] = (float)(value4);

			sprintf(mysqlInsert, "insert into PlcSiemens200 (Id,IndoorTemp,IndoorHum,SupplyPressure,ReturnPressure,InstantFluid,TS) values(%d %s %06f %s %06f %s %06f %s %06f %s %06f  %s %s", id,",",(float)*a,",",(float)*b,",",(float)*c,",",(float)*d,",",(float)*e,",","now())");
			//printf("%s\n",mysqlInsert);
			res = mysql_query(&my_connecyion,mysqlInsert);

			if(!res){
     				 printf("Inserted %lu rows\n",(unsigned long)mysql_affected_rows(&my_connecyion));
			//	printf("run 7\n");
    			}else{
			      fprintf(stderr,"Insert error %d : %s \n",mysql_errno(&my_connecyion),mysql_error(&my_connecyion));
			//printf("run 8\n");
			}

			//insert into PlcSiemens200 (Id,IndoorTemp,IndoorHum,SupplyPressure,ReturnPressure,InstantFluid,TS)  values (1,23.21,45.80,240.1,240.1,44.1,now());
			//sleep(2);
			//bzero(buf,strlen(buf));
		}
	close(fd_Plc);  

	return 0;

}

